require 'rails_helper'
require 'devise'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe '/items', type: :request do

  # This should return the minimal set of attributes required to create a valid
  # Item. As you add validations to Item, be sure to
  # adjust the attributes here as well.
  describe '(Not logged in Admin) Should be redirect to sign_path' do
    before do
      @admin_user = create(:admin_user)
      @organization = create(:organization, manager: @admin_user)
    end

    it 'Redirect to Login URL' do
      get new_admin_organization_item_path(@organization)
      assert_redirected_to new_user_session_url
    end
  end

  describe '(Logged Admin) GET Routes ' do
    before do
      @admin_user = create(:admin_user)
      @organization = create(:organization, manager: @admin_user)
      @item = create(:item, organization: @organization)

      sign_in @admin_user
    end

    describe 'GET /new' do
      it 'renders a successful response' do
        get new_admin_organization_item_path(@organization)
        expect(response).to be_successful
      end
    end

    describe 'GET /show' do
      it 'renders a successful response' do
        get admin_item_path(@item)
        expect(response).to be_successful
      end
    end

    describe 'GET /index' do
      it 'renders a successful response' do
        get admin_organization_items_path(@organization)
        expect(response).to be_successful
      end
    end

    describe 'GET /edit' do
      it 'renders a successful response' do
        get edit_admin_item_path(@item)
        expect(response).to be_successful
      end
    end
  end

  describe '(Logged Admin) POST Routes' do
    before do
      @admin_user = create(:admin_user)
      @organization = create(:organization, manager: @admin_user)
      @item = create(:item, organization: @organization)

      sign_in @admin_user
    end

    describe 'POST /create' do
      context 'with valid parameters' do
        it 'creates and redirect to the new Item' do
          expect {
            post admin_organization_items_path(@organization.id), params: {
              item: {
                name: 'Name',
                organization_id: @organization.id,
                status: true
              }
            }
          }.to change(Item, :count).by(1)

          expect(response).to redirect_to(admin_organization_items_path(@organization))
        end
      end

      context 'with invalid parameters' do
        it 'does not create a new Item' do
          expect {
            post admin_organization_items_path(@organization.id), params: {
              item: {
                name: '',
                organization_id: nil,
                status: true
              }
            }
          }.to change(Item, :count).by(0)
        end

        it "renders a response with 422 status (i.e. to display the 'new' template)" do
          post admin_organization_items_path(@organization), params: {
            item: {
              name: '',
              organization_id: nil,
              status: true
            }
          }
          expect(response).to have_http_status(:unprocessable_entity)
        end
      end
    end
  end

  describe 'PATCH /update' do
    before do
      @admin_user = create(:admin_user)
      @organization = create(:organization, manager: @admin_user)
      @item = create(:item, organization: @organization)

      sign_in @admin_user
    end

    context 'with valid parameters' do
      it 'updates the requested item' do
        patch admin_item_path(@item.id), params: {
          item: {
            name: 'New Name',
            organization_id: @organization.id,
            status: true
          }
        }

        @item.reload
        expect(response).to redirect_to(admin_organization_items_path(@organization.id))
      end
    end

    context 'with invalid parameters' do
      it "renders a response with 422 status (i.e. to display the 'edit' template)" do
        patch admin_item_path(@item.id), params: {
          item: {
            name: '',
            organization_id: nil,
            status: true
          }
        }

        expect(response).to have_http_status(:unprocessable_entity)
      end
    end
  end

  describe 'DELETE /destroy' do
    before do
      @admin_user = create(:admin_user)
      @organization = create(:organization, manager: @admin_user)
      @item = create(:item, organization: @organization)

      sign_in @admin_user
    end

    it 'destroys the requested item' do
      assert_difference 'Item.count', -1 do
        delete admin_item_path(@item)
      end
    end

    it 'redirects to the items list' do
      assert_difference 'Item.count', -1 do
        delete admin_item_path(@item)
      end

      expect(response).to redirect_to(admin_organization_items_path(@organization.id))
    end
  end
end
