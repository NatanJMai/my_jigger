require 'rails_helper'
require 'devise'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/roles", type: :request do
  
  # This should return the minimal set of attributes required to create a valid
  # Role. As you add validations to Role, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    name { "Name" }
    description { "Desc" }
    status { true }
    department_id { 0 }
    permission { :Read }
  }

  let(:invalid_attributes) {
    name { "" }
    description { "" }
    status { }
    department_id { nil }
    permission { }
  }

  describe "(Not logged in Admin) Should be redirect to sign_path" do
    before do
      @admin_user_1  = create(:admin_user)
      @department1   = create(:department, organization: create(:organization, manager: @admin_user_1))
    end

    it "Redirect to Login URL" do
      get new_admin_department_role_path(@department1)
      assert_redirected_to new_user_session_url
    end
  end

  describe "(Logged Admin) GET Routes " do
    before do
      @admin_user_1  = create(:admin_user)
      @department1   = create(:department, organization: create(:organization, manager: @admin_user_1))
      @role1         = create(:role, department: @department1)

      sign_in @admin_user_1
    end

    describe 'GET /new' do
      it "renders a successful response" do
        get new_admin_department_role_path(@department1)
        expect(response).to be_successful
      end
    end

    describe "GET /show" do
      it "renders a successful response" do
        get admin_role_path(@role1)
        expect(response).to be_successful
      end
    end

    describe "GET /index" do
      it "renders a successful response" do
        get admin_department_roles_path(@department1)
        expect(response).to be_successful
      end
    end

    describe "GET /edit" do
      it "renders a successful response" do
        get edit_admin_role_path(@role1)
        expect(response).to be_successful
      end
    end
  end

  describe "(Logged Admin) POST Routes" do
    before do
      @admin_user_1  = create(:admin_user)
      @department1   = create(:department, organization: create(:organization, manager: @admin_user_1))
      @role1         = create(:role, department: @department1)

      sign_in @admin_user_1
    end

    describe "POST /create" do
      context "with valid parameters" do
        it "creates and redirect to the Index (Roles)" do
          expect {
            post admin_department_roles_path(@department1.id), params: {
              role: {
                name: "Name",
                description: "Description",
                department_id: @department1.id,
                permission: :Read,
                status: true
              }
            }
          }.to change(Role, :count).by(1)

          expect(response).to redirect_to(admin_department_roles_path(@department1))
        end
      end

      context "with invalid parameters" do
        it "does not create a new Role" do
          expect {
            post admin_department_roles_path(@department1.id), params: {
              role: {
                name: "",
                description: "",
                department_id: nil,
                permission: :Read,
                status: true
              }
            }
          }.to change(Role, :count).by(0)
        end

        it "renders a response with 422 status (i.e. to display the 'new' template)" do
          post admin_department_roles_path(@department1.id), params: {
            role: {
              name: "",
              description: "",
              department_id: nil,
              permission: :Read,
              status: true
            }
          }
          expect(response).to have_http_status(:unprocessable_entity)
        end
      end
    end
  end

  describe "PATCH /update" do
    before do
      @admin_user_1  = create(:admin_user)
      @department1   = create(:department, organization: create(:organization, manager: @admin_user_1))
      @role1         = create(:role, department: @department1)

      sign_in @admin_user_1
    end

    context "with valid parameters" do
      it "updates the requested role" do

        patch admin_role_path(@role1.id), params: {
          role: {
            name: "New Name",
            description: "New Description",
            department_id: @department1.id,
            permission: :Read,
            status: true
          }
        }

        @role1.reload
        expect(response).to redirect_to(admin_department_roles_path(@department1.id))
      end
    end

    context "with invalid parameters" do
      it "renders a response with 422 status (i.e. to display the 'edit' template)" do
        patch admin_role_path(@role1.id), params: {
          role: {
            name: "",
            description: "",
            department_id: @department1.id,
            permission: :Read,
            status: true
          }
        }

        expect(response).to have_http_status(:unprocessable_entity)
      end
    end
  end

  describe "DELETE /destroy" do
    before do
      @admin_user_1  = create(:admin_user)
      @department1   = create(:department, organization: create(:organization, manager: @admin_user_1))
      @role1         = create(:role, department: @department1)

      sign_in @admin_user_1
    end

    it "destroys the requested department" do
      assert_difference 'Role.count', -1 do
        delete admin_role_url(@role1)
      end
    end

    it "redirects to the roles list" do
      assert_difference 'Role.count', -1 do
        delete admin_role_url(@role1)
      end

      expect(response).to redirect_to(admin_department_roles_path(@department1.id))
    end
  end
end
