require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/products", type: :request do

  describe "(Not logged in Admin) Should be redirect to sign_path" do
    before do
      @admin_user = create(:admin_user)
      @organization = create(:organization, manager: @admin_user)
    end

    it "Redirect to Login URL" do
      get new_admin_organization_product_path(@organization)
      assert_redirected_to new_user_session_url
    end
  end

  describe "(Logged Admin) GET Routes " do
    before do
      @admin_user = create(:admin_user)
      @organization = create(:organization, manager: @admin_user)
      @product = create(:product, organization: @organization)

      sign_in @admin_user
    end

    describe 'GET /new' do
      it "renders a successful response" do
        get new_admin_organization_product_path(@organization)
        expect(response).to be_successful
      end
    end

    describe "GET /show" do
      it "renders a successful response" do
        get admin_product_path(@product)
        expect(response).to be_successful
      end
    end

    describe "GET /index" do
      it "renders a successful response" do
        get admin_organization_products_path(@organization)
        expect(response).to be_successful
      end
    end

    describe "GET /edit" do
      it "renders a successful response" do
        get edit_admin_product_path(@product)
        expect(response).to be_successful
      end
    end
  end

  describe "(Logged Admin) POST Routes" do
    before do
      @admin_user = create(:admin_user)
      @organization = create(:organization, manager: @admin_user)
      @product = create(:product, organization: @organization)

      sign_in @admin_user
    end

    describe "POST /create" do
      context "with valid parameters" do
        it "creates and redirect to the product list" do
          expect {
            post admin_organization_products_path(@organization.id), params: {
              product: {
                name: "Name",
                prep_method: "Prep Method",
                unit: :kg,
                volume: 1.0,
                best_before: Date.current,
                organization_id: @organization.id,
                status: true
              }
            }
          }.to change(Product, :count).by(1)

          expect(response).to redirect_to(admin_organization_products_path(@organization.id))
        end
      end

      context "with invalid parameters" do
        it "does not create a new product" do
          expect {
            post admin_organization_products_path(@organization), params: {
              product: {
                name: "",
                prep_method: "Prep Method",
                unit: :kg,
                volume: 1.0,
                best_before: Date.current,
                organization_id: nil,
                status: true
              }
            }
          }.to change(Product, :count).by(0)
        end

        it "renders a response with 422 status (i.e. to display the 'new' template)" do
          post admin_organization_products_path(@organization), params: {
            product: {
              name: "",
              prep_method: "Prep Method",
              unit: :kg,
              volume: 1.0,
              best_before: Date.current,
              organization_id: nil,
              status: true
            }
          }
          expect(response).to have_http_status(:unprocessable_entity)
        end
      end
    end
  end

  describe "PATCH /update" do
    before do
      @admin_user = create(:admin_user)
      @organization = create(:organization, manager: @admin_user)
      @product = create(:product, organization: @organization)

      sign_in @admin_user
    end

    context "with valid parameters" do
      it "updates the requested product" do
        patch admin_product_path(@product.id), params: {
          product: {
            name: "Name",
            prep_method: "Prep Method",
            unit: :kg,
            volume: 1.0,
            best_before: Date.current,
            organization_id: @organization.id,
            status: true
          }
        }

        @product.reload
        expect(response).to redirect_to(admin_organization_products_path(@organization))
      end
    end

    context "with invalid parameters" do
      it "renders a response with 422 status (i.e. to display the 'edit' template)" do
        patch admin_product_path(@product.id), params: {
          product: {
            name: "",
            prep_method: "Prep Method",
            unit: :kg,
            volume: 1.0,
            best_before: Date.current,
            organization_id: nil,
            status: true
          }
        }

        expect(response).to have_http_status(:unprocessable_entity)
      end
    end
  end

  describe "DELETE /destroy" do
    before do
      @admin_user = create(:admin_user)
      @organization = create(:organization, manager: @admin_user)
      @product = create(:product, organization: @organization)

      sign_in @admin_user
    end

    it "destroys the requested product" do
      assert_difference 'Product.count', -1 do
        delete admin_product_url(@product)
      end
    end

    it "redirects to the products list" do
      assert_difference 'Product.count', -1 do
        delete admin_product_url(@product)
      end

      expect(response).to redirect_to(admin_organization_products_url(@organization.id))
    end
  end
end
