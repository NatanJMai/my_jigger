require 'rails_helper'
require 'devise'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/organizations", type: :request do
  before do
    @admin_user_1 = create(:admin_user)
    @admin_user_2 = create(:admin_user)
    @org1 = create_list(:organization, 5, manager: @admin_user_1)
  end

  describe "not logged or not admin user" do
    it "should not have access to any information about organization" do
      get admin_organizations_url
      assert_redirected_to new_user_session_url
    end
  end

  describe "GET /index" do
    it "admin user should get access to your organizations" do
      sign_in @admin_user_1

      get admin_organizations_url
      expect(response).to have_http_status(:success)
    end
  end

  describe "GET /show" do
    it "admin user should get access (show) your organization" do
      sign_in @admin_user_1

      @org1.each do |org|
        get admin_organization_url(org)
        expect(response).to be_successful
      end
    end
  end

  describe "1. (ADMIN) Organization (Create, Edit and Destroy)" do
    it "admin user should be able to create Organizations with valid information and redirect to organizations" do
      sign_in @admin_user_1

      assert_difference 'Organization.count', 1 do
        post admin_organizations_path, params: {
          organization: {
            name:       "Name",
            address:    "Address",
            site:       "www.example.com",
            phone:      "0493329000",
            email:      "example@example.com",
            manager_id: @admin_user_1.id,
            status:     true
          }
        }
      end

      assert_redirected_to admin_organizations_url
    end

    it "admin user should be able to edit Organizations with valid information and redirect to organizations" do
      sign_in @admin_user_1

      @org1.each do |org|
        get edit_admin_organization_url(org)
        expect(response).to be_successful
      end

      patch admin_organization_url(@org1[0]), params: {
        organization: {
          name:       "Name",
          address:    "Address",
          site:       "www.example.com",
          phone:      "0493329000",
          email:      "example@example.com",
          manager_id: @admin_user_1.id,
          status:     true
        }
      }

      assert_redirected_to admin_organization_url(@org1[0])
    end

    it "Logged_in admin user should not be able to edit a organization with INVALID information" do
      sign_in @admin_user_1

      @org1.each do |org|
        get edit_admin_organization_url(org)
        expect(response).to be_successful
      end

      patch admin_organization_url(@org1[0]), params: {
        organization: {
          name:       "Name",
          address:    "Address",
          site:       "",
          phone:      "",
          email:      "",
          manager_id: nil,
          status:     true
        }
      }

      # 422 - Unprocessable Entity - Validation Errors
      expect(response).to have_http_status(422)
    end

    it "Logged_in admin user should be able to destroy a organization with no related orders_items" do
      sign_in @admin_user_1

      assert_difference 'Organization.count', -1 do
        delete admin_organization_url(@org1[0])
      end

      assert_redirected_to admin_organizations_url
    end
  end
end
